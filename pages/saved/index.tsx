import React, { useEffect, useState } from 'react';
import type { NextPage } from 'next'
import Head from 'next/head'
import styles from '../../styles/Home.module.css'
import { EncryptData, encryptFile } from "../../components/crypto/encrypt";
import { getRSA, GetRSA } from "../../components/indexed/rsa";
import { create, Options } from 'ipfs-http-client';
import { DecryptData, TextEncoding } from "../../components/crypto/decrypt";
import { ab2str, str2ab } from "../../components/crypto/conversion";
import { useRouter } from "next/router";
import {GetSaves} from "../../components/saved/fetch";
import {route} from "next/dist/server/router";

const Saved: NextPage = () => {
  const [saves, setSaves] = useState<any[]>([])
  const [hash, setHash] = useState("")
  const [savedID, setSavedID] = useState("")
  const handleInputSavedID = (e: any) => {
    setSavedID(e.target.value)
  }

  const router = useRouter()
  const [token, setToken] = useState("")
  const [hvxahvName, setHvxahvName] = useState("")

  const ipfsAPI = "http://127.0.0.1:5001"
  useEffect(() => {
    const token = localStorage.getItem("hvxahv_login_token")
    const n = localStorage.getItem("hvxahv_name")
    if (token == undefined || n == undefined) {
      router.push("/accounts/sign_up")
      return
    }
    setHvxahvName(n)
    setToken(token)
    GetSaves(token).then(r => {
      setSaves(r.saves)
    })
  }, [router])

  // The file is uploaded to IPFS and the returned hash is encrypted and submitted to the hvxahv server.
  // The encrypted hash obtained from hvxahv is decrypted by the local rsa private key and displayed to the client.

  const upload = async (e: any) => {
    const name = e.target.files[0].name
    const type = e.target.files[0].type
    const f = new Uint8Array(await e.target.files[0].arrayBuffer())
    const encrypted = await encryptFile(hvxahvName, f)
    if (encrypted == undefined) {
      return
    }
    // @ts-ignore
    const blob = new Blob([encrypted], {type: e.target.files[0].type})

    const client = create(ipfsAPI as Options)
    const { path } = await client.add(blob)
    console.log(path)
    // const hash = await encrypt(path)
    // console.log(name, type, hash)
    post(name, type, path)

  }

  const encrypt = async (hash: string) => {
    // const k = await getRSA(hvxahvName)
    // if (k == undefined) {
    //   return
    // }
    
    // const res = await EncryptData(k.public_key, TextEncoding(hash))
    // const x = ab2str(res)
    // return window.btoa(x)
  }

  const post = (name: string, type: string, hash: string) => {
    const myHeaders = new Headers();
    myHeaders.append("Authorization", `Bearer ${token}`);

    const formdata = new FormData();
    formdata.append("hash", hash);
    formdata.append("type", type);
    formdata.append("name", name);

    const requestOptions = {
      method: 'POST',
      headers: myHeaders,
      body: formdata,
      redirect: 'follow'
    };

    // @ts-ignore
    fetch("http://localhost:8088/api/v1/saved", requestOptions)
      .then(response => response.text())
      .then(result => console.log(result))
      .catch(error => console.log('error', error));
  }

  const handleGet = () => {
    const myHeaders = new Headers();
    myHeaders.append("Authorization", `Bearer ${token}`);

    const requestOptions = {
      method: 'GET',
      headers: myHeaders,
      redirect: 'follow'
    };

    // @ts-ignore
    fetch(`http://localhost:8088/api/v1/saved/${savedID}`, requestOptions)
      .then(res => res.json())
      .then(res => {
        console.log(res)
        console.log(res.message.Name)
        console.log(res.message.FileType)
        console.log(res.message.Hash)
        
      })
      .catch(error => console.log('error', error));
  }

  const handleCheckFileByHash = (hash: string) => {
    
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Saved</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <div>
          {saves && saves.map((i, idx) => {
            return (
              <ul key={idx}>
                <li>{i.Name} - {i.FileType} - <button onClick={() => handleCheckFileByHash(i.Hash)}>CHECK</button></li>
              </ul>
            )
          })}
        </div>

        <div>
          <input type="file" onChange={e => upload(e)} />
          <input type="checkbox" /> <p>Encrypt</p>
        </div>
        <div>
          <h2>Get content by hash</h2>
          <input type="text" name="hash" onChange={e => handleInputSavedID(e)} />
          <button onClick={() => handleGet()}>Get</button>
        </div>
        <div>
          {hash && <div>
            <code>{hash}</code>
            <div>
              Preview: →
              <a href={`http://localhost:8081/ipfs/${hash}`}
                target={`_blank`}
                style={{ color: `blue` }}
              >
                GO...
              </a>
              ←
            </div>
          </div>}
        </div>
      </main>

      <footer className={styles.footer}>

      </footer>
    </div>
  )
}

export default Saved
