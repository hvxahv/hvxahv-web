import type { NextPage } from 'next'
import Head from 'next/head'
import styles from '../../styles/Home.module.css'
import {Key, ReactChild, ReactFragment, ReactPortal, useEffect, useState} from "react";
import {useRouter} from "next/router";
import sdk from 'matrix-js-sdk';

const Messages: NextPage = () => {
  const route = useRouter()
  const [token, setToken] = useState("")
  const [userID, setUserID] = useState("")
  const [homeServer, setHomeServer] = useState("")
  useEffect(() => {
    const matrixToken = localStorage.getItem("hvxahv_matrix_token")
    const matrixUserId = localStorage.getItem("hvxahv_matrix_userid")
    const matrixHomeServer = localStorage.getItem("hvxahv_matrix_server")

    if (matrixToken == null || matrixUserId == null || matrixHomeServer == null) {
      const token = localStorage.getItem("hvxahv_login_token")
      const myHeaders = new Headers();
      myHeaders.append("Authorization", `Bearer ${token}`);

      const requestOptions = {
        method: 'GET',
        headers: myHeaders,
        redirect: 'follow'
      };

      // @ts-ignore
      fetch("http://localhost:8088/api/v1/message/access", requestOptions)
        .then(res => res.json())
        .then(res => {
          console.log(res)
          if (res.code == "401") {
            route.push("/messages/register").then(() => {
            })
          }
          localStorage.setItem("hvxahv_matrix_token", res.matrix.Token)
          localStorage.setItem("hvxahv_matrix_userid", res.matrix.UserId)
          localStorage.setItem("hvxahv_matrix_server", res.matrix.HomeServer)
          setToken(res.matrix.Token)
          setUserID(res.matrix.UserId)
          setHomeServer(res.matrix.HomeServer)
        })
        .catch(error => console.log('error', error));
    } else {
      setToken(matrixToken)
      setUserID(matrixUserId)
      setHomeServer(matrixHomeServer)
    }
  }, [homeServer, route, token, userID])

  const [roomTimeline, setRoomTimeline] = useState<any>([])
  useEffect(() => {
    if (token != "") {
      (async () => {
        const client = sdk.createClient({
          baseUrl: "http://localhost:8008",
          accessToken: token,
          userId: userID
        })
        await client.startClient({
          pollTimeout: 3000,
        })

        client.once('sync', function (state, prevState, res) {
          console.log(state); // state will be 'PREPARED' when the client is ready to use
        });

        client.on("Room.timeline", function (event, room, toStartOfTimeline) {
          setRoomTimeline((oldArray: any) => [...oldArray, event.event]);
        });


        const rooms = client.getRooms();
        rooms.forEach(room => {
          room.timeline.forEach(t => {
            console.log(JSON.stringify(t.event.content));
          });
        });
      })()
    }
  }, [homeServer, token, userID])
  console.log(roomTimeline)
  return (
    <div className={styles.container}>
      <Head>
        <title>Messages</title>
        <meta name="description" content="Generated by create next app"/>
        <link rel="icon" href="/favicon.ico"/>
      </Head>

      <main className={styles.main}>
        {roomTimeline && roomTimeline.reverse().map((i: any, idx: any) => {
          return (
            <div key={idx}>
              <div>Room ID: {i.room_id}</div>
              <div>Sender: {i.sender}</div>
              <div>Content: {i.content.displayname} - {i.content.displayname}</div>
              <div>Creator: {i.content.creator}</div>
              <div>body: {i.content.body}</div>
              <div>Content Sender: {i.content.sender}</div>
              <div>Type: {i.content.type}</div>
              <hr/>
            </div>
          )
        })}
      </main>

      <footer className={styles.footer}>

      </footer>
    </div>
  )
}

export default Messages
